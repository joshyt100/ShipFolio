generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {
  id          Int      @id @default(autoincrement())
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  createdById String
  createdBy   User     @relation(fields: [createdById], references: [id])

  @@index([name])
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // Verbatim from GitHub
  access_token             String? // Verbatim from GitHub
  expires_at               Int?    // Verbatim from GitHub (timestamp in seconds)
  token_type               String? // Verbatim from GitHub (e.g., "bearer")
  scope                    String? // Verbatim from GitHub (scopes granted)
  id_token                 String? // Verbatim from GitHub (if OIDC)
  session_state            String? // Verbatim from some providers

  // GitHub specific field for refresh token rotation if enabled/supported by NextAuth version
  refresh_token_expires_in Int?    // As mentioned in NextAuth docs for GitHub

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId]) // Added for better query performance
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId]) // Added for better query performance
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  posts         Post[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GitHubStatsCache {
  username              String   @id
  profileData           Json
  basicStats            Json
  topLanguages          Json
  contributionBreakdown Json
  activityStats         Json
  lastFetchedAt         DateTime @default(now()) @updatedAt
}

model GitHubPRsCache {
  username      String   @id
  prs           Json
  lastFetchedAt DateTime @default(now()) @updatedAt
}

